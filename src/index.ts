#!/usr/bin/env node
import chokidar from 'chokidar';
import fs from 'fs';
import _glob from 'glob';
import Handlebars from 'handlebars';
import { join } from 'path';
import { promisify } from 'util';
import { Config } from './Config';
import { readConfig } from './readConfig';
import { Template } from './Template';
import { Hbs } from './types';

const glob = promisify(_glob);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

const autoGenWarning = (template: string) => `/*
 * WARNING!
 *
 * This file was generated by the following autogen template:
 *
 * ${template}
 *
 * Do not modify, as any changes will be overwritten!
 */
`;

async function writeTemplate(
  {
    dependencies,
    hbs,
    templateFile,
    transformData = files => ({ files }),
  }: Hbs & Template,
  { baseDir }: Config,
) {
  const files = (await Promise.all(
    dependencies.map(path => glob(path)),
  )).reduce((l, r) => [...l, ...r], []);

  const destination = templateFile.replace(baseDir, '').replace('.hbs', '');

  await writeFile(
    destination,
    `${autoGenWarning(templateFile)}\n${hbs(await transformData(files))}`,
  );
}

async function setupTemplate(
  { dependencies, templateFile, transformData }: Template,
  config: Config,
) {
  const hbs = Handlebars.compile(
    await readFile(join(process.cwd(), config.baseDir, templateFile), 'utf8'),
  );

  const write = () =>
    writeTemplate(
      {
        dependencies,
        hbs,
        templateFile,
        transformData,
      },
      config,
    );

  if (process.argv.find(arg => arg === '--watch')) {
    const onChange = () => write().catch(console.error);

    await write();

    chokidar
      .watch(dependencies)
      .on('add', onChange)
      .on('change', onChange)
      .on('unlink', onChange);
  } else {
    await write();
  }
}

const main = async () => {
  const config = await readConfig();

  if (config.configureHandlebars) {
    config.configureHandlebars(Handlebars);
  }

  for (const template of config.templates) {
    await setupTemplate(template, config);
  }
};

main().catch(console.error);
